#include <iostream>
#include <ctime>
#include <cmath>
#include <valarray>

using namespace std;

double QuadraticMean(int(&arr), int arraySize) {
    int* parr = &arr;
    double a = 0;
    for (int i = 0; i < arraySize; i++) {
        a += pow(*(parr + i), 2);
    }
    a /= arraySize;
    double b = sqrt(a);
    return b;
}

double ArithmeticMean(int(&arr), int arraySize) {
    int* parr = &arr;
    double a = 0;
    for (int i = 0; i < arraySize; i++) {
        a += *(parr + i);
    }
    a /= arraySize;
    return a;
}

double GeometricMean(int(&arr), int arraySize) {
    int* parr = &arr;
    double b = 1;
    for (int i = 0; i < arraySize; i++) {
        b *= *(parr + i);
    }
    double a = pow(b, 1.0 / arraySize);
    return a;
}

double HarmonicMean(int(&arr), int arraySize) {
    int* parr = &arr;
    double b = 0;
    for (int i = 0; i < arraySize; i++) {
        b += 1.0 / (*(parr + i));
    }
    double a = arraySize / b;
    return a;
}

bool IsPrimeNum(int(& arr), int a) {
    bool isPrime = true;
    for (int i = 2; i < a;i++) {
        if(isPrime==true) {
            if (a % i == 0) {
                isPrime = false;
            }
            else {
                isPrime = true;
            }
        }
        else {
            break;
        }
    }
    if (isPrime == true) {
        cout << a << " - это простое число" << endl;
    }
    if (isPrime == false) {
        cout << a << " - это не простое число" << endl;
    }
    return isPrime;
}

std::valarray<bool> sieve_of_eratosthenes(size_t n) {
    std::valarray<bool> is_prime(true, n + 1);
    is_prime[0] = is_prime[1] = false;
    for (size_t i = 2; i <= n; ++i) {
        if (is_prime[i] && i * i <= n) {
            for (size_t j = i * i; j <= n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return std::move(is_prime);
}

void print_prime_numbers(size_t n) {
    int numOfPrime = 0;
    auto is_prime = sieve_of_eratosthenes(n);
    int *primeArr = new int;
    int j = 0;
    for (size_t i = 2;  i <= n; ++i) {
        if (is_prime[i]) {
            std::cout << i << '\t';
            numOfPrime++;
            primeArr[j] = i;
            j++;
        }
    }
    cout << "\n\n" << numOfPrime << " - количество простых чисел до " << n << endl;
    double check = numOfPrime;
    if (((check /(log(check)-1.5))>check)&&(check > (check / (log(check) - 0.5)))) {
        cout<<"\n" << "Неравенство для числа "<<check<<" верно" << endl;
    }
    else {
        cout << "\n" << "Неравенство для числа " << check << " не верно" << endl;
    }
    double k2 = 50;
    if (((check*(log(check)+log(log(check))-1.5))<k2)&& ((check * (log(check) + log(log(check)) - 0.5)) > k2)) {
        cout << "\n" << "Неравенство для числа "<<k2 <<" верно" << endl;
    }
    else {
        cout << "\n" << "Неравенство для числа " << k2 << " не верно" << endl;
    }
    cout <<"\n"<<"Среднее квадратическое первых "<<numOfPrime<<" простых чисел " << QuadraticMean(*primeArr, numOfPrime) << endl;
    cout << "\n" << "Среднее арифметическое первых " << numOfPrime << " простых чисел " << ArithmeticMean(*primeArr, numOfPrime) << endl;
    cout << "\n" << "Среднее геометрическое первых " << numOfPrime << " простых чисел " << GeometricMean(*primeArr, numOfPrime) << endl;
    cout << "\n" << "Среднее гармоническое первых " << numOfPrime << " простых чисел " << HarmonicMean(*primeArr, numOfPrime) << endl;
}

void main()
{
    srand(time(NULL));
    setlocale(LC_ALL, "Russian");
    int a;
    cin >> a;
    int *arr = new int[a];
    for (int i = 1; i < a;i++) {
        arr[i] = i;
    }
    cout << IsPrimeNum(*arr,a)<<"\n" << "Все простые числа до " << a << "\n" << endl;
    print_prime_numbers(a);
}
