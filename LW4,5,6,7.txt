#include <iostream>
#include <ctime>
#include <chrono>

using namespace std;

long Size = 20;
long MaxNumber = 70000;
int* BaseArray = new int[Size];

void Print(int* BaseArray) {
    for (int i = 0;i < Size;i++) {
        cout << BaseArray[i] << " ";
    }
    cout << "\n\n";
}

void Exchange(int i, int j) {
    swap(BaseArray[i], BaseArray[j]);
}

void ChoiseExchange(int i, int j) {
    swap(BaseArray[i], BaseArray[j]);
}

bool Check(int* BaseArray) {
    bool swapped = true;
    for (int i = 0; i < Size; i++) {
        if (swapped) {
            if (BaseArray[i] < BaseArray[i + 1]) {
                Exchange(i, i + 1);
                swapped = true;
            }
        }
        else {
            swapped = false;
            break;
        }
    }
    if (swapped) {
        cout << "\n\nМассив отсортирован корректно" << endl;
    }
    else {
        cout << "\n\nМассив отсортирован некорректно" << endl;
    }
    return swapped;
}

void Initarray(int t) {
    srand(time(NULL));
    cout << "\n\n";
    switch (t) {
    case 1:
        BaseArray[0] = MaxNumber;
        for (int i = 1;i <= Size;i++) {
            BaseArray[i] = BaseArray[i - 1] - rand() % (MaxNumber / Size) - 1;
        }
        Print(BaseArray);
        break;
    case 2:
        BaseArray[0] = 1;
        for (int i = 1;i <= Size;i++) {
            BaseArray[i] = BaseArray[i - 1] + rand() % (MaxNumber / Size) - 1;
        }
        Print(BaseArray);
        break;
    case 3:
        for (int i = 0;i <= Size;i++) {
            BaseArray[i] = rand() % 12 + 1;
        }
        Print(BaseArray);
        break;
    case 4:
        for (int i = 0;i <= Size;i++) {
            BaseArray[i] = rand() % MaxNumber + 1;
        }
        Print(BaseArray);
        break;
    default:
        cout << "Такого варианта заполнения нет" << endl;
        break;
    }
}

void Swap() {
    long UBound = Size;
    bool EndFlag;
    do {
        EndFlag = true;
        for (int i = 0; i < UBound; i++) {
            if (BaseArray[i] > BaseArray[i + 1]) {
                Exchange(i, i + 1);
                EndFlag = false;
            }
        }
        UBound--;
    } while (!EndFlag);
}

void ChoiseSwap() {
    long LBound = 0, MaxElem, MaxIndex;
    do {
        MaxElem = BaseArray[LBound];
        MaxIndex = LBound;
        for (int i = LBound + 1; i < Size; i++)
            if (MaxElem < BaseArray[i]) {
                MaxElem = BaseArray[i];
                MaxIndex = i;
            }
        if (MaxIndex != LBound)
            ChoiseExchange(LBound, MaxIndex);
        LBound++;
    } while (LBound != Size - 1);
}

double InitTimer() {
    clock_t start = clock();
    cout << "\n\n"<< "Начало отсчета сортировки " << start;
    return start;
}

void GetTimer(double start) {
    clock_t end = clock();
    cout << "\n\n"<< "Конец " << start;
    double dif = end - start;
    cout << "\n\n" << "Затраченное время " << dif;
}

void FillingArr(int *arr) {
    cout << "Заполнение массива: 1 - упордоченными числами, 2 - упорядоченными в обратном порядке, 3 - вырожденными, 4 - случайными" << endl;
    int a;
    cin >> a;
    Initarray(a);
    cout << "\n\n" << "Вывод массива, соразмерного BaseArray:\n";
    for (int i = 0;i <= Size;i++) {
        cout << arr[i] << " ";
    }
    long UBound = Size;
    bool EndFlag;
    auto begin3 = chrono::steady_clock::now();
    cout << "\n\nНачало отсчета сортировки";
    if (a == 1) {
        Swap();
    }
    else if (a == 2) {
        do {
            EndFlag = true;
            for (int i = 0; i < UBound; i++) {
                if (BaseArray[i] < BaseArray[i + 1]) {
                    Exchange(i, i + 1);
                    EndFlag = false;
                }
            }
            UBound--;
        } while (!EndFlag);
    }
    else if (a == 3) {
        Swap();
    }
    else if (a == 4) {
        Swap();
    }
    cout << "\n\n";
    for (int i = 0;i <= Size;i++) {
        cout << BaseArray[i] << " ";
    }
    auto end3 = chrono::steady_clock::now();
    auto elapsed_ms = chrono::duration_cast<chrono::nanoseconds>(end3 - begin3);
    cout << "\n\nКонец сортировки, ее время: " << elapsed_ms.count();
    cout << "\n\n"<< Check(BaseArray);
}

void main() {
    setlocale(LC_ALL, "Russian");
    int* arr = new int[Size];
    for (int i = 0;i < Size;i++) {
        arr[i] = 1 + rand() % 100;
    }
    FillingArr(arr);
    cout << "\n\nПерезаполнение массива случайными числами: ";
    for (int i = 0;i < Size;i++) {
        BaseArray[i] = 1 + rand() % 20;
    }
    for (int i = 0;i < Size;i++) {
        cout << BaseArray[i] << " ";
    }
    auto begin3 = chrono::steady_clock::now();
    cout << "\n\nНачало отсчета сортировки";
    ChoiseSwap();
    cout << "\n\n";
    for (int i = 0;i < Size;i++) {
        cout << BaseArray[i] << " ";
    }
    auto end3 = chrono::steady_clock::now();
    auto elapsed_ms = chrono::duration_cast<chrono::nanoseconds>(end3 - begin3);
    cout << "\n\nКонец сортировки, ее время: " << elapsed_ms.count();
    cout << "\n" << Check(BaseArray);
}